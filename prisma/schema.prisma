// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts    Account[]
  sessions    Session[]
  servers     Server[]
  memberships Membership[]
  messages    Message[]

  sentFriendRequests     Friendship[] @relation("sentFriendRequests")
  receivedFriendRequests Friendship[] @relation("receivedFriendRequests")
}

model Friendship {
  id         String           @id @default(cuid())
  senderId   String
  receiverId String
  status     FriendshipStatus @default(PENDING)

  sender   User @relation("sentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("receivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @unique
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Server {
  id        String   @id @default(cuid())
  name      String
  image     String?
  ownerId   String
  createdAt DateTime @default(now())

  owner       User         @relation(fields: [ownerId], references: [id])
  memberships Membership[]
  channels    Channel[]
}

model Membership {
  id       String @id @default(cuid())
  userId   String
  serverId String
  role     Role   @default(USER)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
  MODERATOR
}

model Channel {
  id       String @id @default(cuid())
  name     String
  type     String
  serverId String

  server   Server    @relation(fields: [serverId], references: [id])
  messages Message[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  channelId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
}
